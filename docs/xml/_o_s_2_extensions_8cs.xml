<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_o_s_2_extensions_8cs" kind="file" language="C#">
    <compoundname>Extensions.cs</compoundname>
    <innerclass refid="class_pathfinder_1_1_game_1_1_o_s_1_1_extensions" prot="public">Pathfinder::Game::OS::Extensions</innerclass>
    <innernamespace refid="namespace_pathfinder_1_1_game_1_1_o_s">Pathfinder::Game::OS</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_system" kindref="compound">System</ref>;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_system" kindref="compound">System</ref>.Collections.Generic;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_pathfinder" kindref="compound">Pathfinder</ref>.<ref refid="namespace_pathfinder_1_1_game" kindref="compound">Game</ref>.<ref refid="namespace_pathfinder_1_1_game_1_1_exe_module" kindref="compound">ExeModule</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_pathfinder" kindref="compound">Pathfinder</ref>.<ref refid="namespace_pathfinder_1_1_util" kindref="compound">Util</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="namespace_pathfinder_1_1_game_1_1_o_s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_pathfinder" kindref="compound">Pathfinder</ref>.Game.OS</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8" refid="class_pathfinder_1_1_game_1_1_o_s_1_1_extensions" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_pathfinder_1_1_game_1_1_o_s_1_1_extensions" kindref="compound">Extensions</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>List&lt;<ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_exe_module" kindref="compound">ExeModule</ref>&gt;<sp/>GetExesFor(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os,<sp/>Type<sp/>instanceType)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;<ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_exe_module" kindref="compound">ExeModule</ref>&gt;();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>e<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.exes)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.GetType()<sp/>==<sp/>instanceType)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Add(e);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>List&lt;T&gt;<sp/>GetExesFor&lt;T&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os)<sp/>where<sp/>T<sp/>:<sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_exe_module" kindref="compound">ExeModule</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;T&gt;();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>e<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.exes)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>is<sp/>T)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Add(e<sp/>as<sp/>T);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>List&lt;<ref refid="namespace_executable" kindref="compound">Executable</ref>.Instance&gt;<sp/>GetModExeInterfaceFor(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os,<sp/>Type<sp/>interfaceType)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;<ref refid="namespace_executable" kindref="compound">Executable</ref>.Instance&gt;();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>e<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.GetExesFor&lt;<ref refid="namespace_executable" kindref="compound">Executable</ref>.Instance&gt;())</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.Interface.GetType()<sp/>==<sp/>interfaceType)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Add(e);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>List&lt;<ref refid="namespace_executable" kindref="compound">Executable</ref>.Instance&gt;<sp/>GetModExeInterfaceFor&lt;T&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os)<sp/>where<sp/>T<sp/>:<sp/><ref refid="namespace_executable" kindref="compound">Executable</ref>.IInterface</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;Executable.Instance&gt;();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>e<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.GetExesFor&lt;<ref refid="namespace_executable" kindref="compound">Executable</ref>.Instance&gt;())</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e.Interface<sp/>is<sp/>T)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Add(e);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>KillExecutableModule(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os,<sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_exe_module" kindref="compound">ExeModule</ref><sp/>module,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldWrite<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os.exes.Contains(module))</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>module.Kill(shouldWrite);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>KillExecutableModule(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>input,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>searchName<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldWrite<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_exe_module" kindref="compound">ExeModule</ref><sp/>mod<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.Trim();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.TryParse(input,<sp/>out<sp/>i))</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mod<sp/>=<sp/>os.exes.Find((obj)<sp/>=&gt;<sp/>obj.PID<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mod<sp/>==<sp/>null<sp/>&amp;&amp;<sp/>shouldWrite)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Write(<ref refid="class_pathfinder_1_1_util_1_1_locale" kindref="compound">Locale</ref>.<ref refid="class_pathfinder_1_1_util_1_1_locale_1ab067b6f22ec3cca48f69316fb264bcb6" kindref="member">Get</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>PID&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(searchName<sp/>&amp;&amp;<sp/>!</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.IsNullOrWhiteSpace(input))</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mod<sp/>=<sp/>os.exes.Find((obj)<sp/>=&gt;<sp/>obj.IdentifierName<sp/>==<sp/>input);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mod<sp/>==<sp/>null<sp/>&amp;&amp;<sp/>shouldWrite)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Write(<ref refid="class_pathfinder_1_1_util_1_1_locale" kindref="compound">Locale</ref>.<ref refid="class_pathfinder_1_1_util_1_1_locale_1ab067b6f22ec3cca48f69316fb264bcb6" kindref="member">Get</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Identifier<sp/>Name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shouldWrite)<sp/>os.Write(<ref refid="class_pathfinder_1_1_util_1_1_locale" kindref="compound">Locale</ref>.<ref refid="class_pathfinder_1_1_util_1_1_locale_1ab067b6f22ec3cca48f69316fb264bcb6" kindref="member">Get</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Invalid<sp/>PID<sp/>or<sp/>Input<sp/>Format&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mod?.Kill(shouldWrite)<sp/>??<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>KillAllExecutableModules(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldWrite<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>os.exes.Count<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.exes[i].Kill(shouldWrite);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_computer" kindref="compound">Computer</ref><sp/>GetCurrentComputer(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os)<sp/>=&gt;<sp/><ref refid="class_pathfinder_1_1_util_1_1_utility" kindref="compound">Utility</ref>.<ref refid="class_pathfinder_1_1_util_1_1_utility_1a9b78ea80a2773773d73981412f367c1d" kindref="member">GetCurrentComputer</ref>(os);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>Write(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>write,<sp/>params<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[]<sp/>args)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.<ref refid="class_hacknet_1_1_o_s_1acb32c7260d678cfef8bc4c8b26f0b38d" kindref="member">write</ref>(args<sp/>==<sp/>null<sp/>||<sp/>args.Length<sp/>&lt;<sp/>1<sp/>?<sp/>write<sp/>:<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.Format(write,<sp/>args));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>WriteSingle(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/><ref refid="namespace_hacknet" kindref="compound">Hacknet</ref>.<ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref><sp/>os,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>write,<sp/>params<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[]<sp/>args)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.<ref refid="class_hacknet_1_1_o_s_1a4016738ae048b2ec2d71f78c320cb889" kindref="member">writeSingle</ref>(args<sp/>==<sp/>null<sp/>||<sp/>args.Length<sp/>&lt;<sp/>1<sp/>?<sp/>write<sp/>:<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.Format(write,<sp/>args));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Pathfinder/Game/OS/Extensions.cs"/>
  </compounddef>
</doxygen>
