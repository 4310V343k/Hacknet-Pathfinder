<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_pathfinder_1_1_util_1_1_convert_any" kind="class" language="C#" prot="public">
    <compoundname>Pathfinder::Util::ConvertAny</compoundname>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_pathfinder_1_1_util_1_1_convert_any_1a767c2e6f9624485257d66bde114cc17d" prot="private" static="yes" mutable="no">
        <type>MethodInfo</type>
        <definition>MethodInfo Pathfinder.Util.ConvertAny._genericConvertMethod</definition>
        <argsstring></argsstring>
        <name>_genericConvertMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="16" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pathfinder_1_1_util_1_1_convert_any_1a2a5f1309b602aefd2c4918e41be4a3f2" prot="private" static="yes" mutable="no">
        <type>MethodInfo</type>
        <definition>MethodInfo Pathfinder.Util.ConvertAny._genericDefaultMethod</definition>
        <argsstring></argsstring>
        <name>_genericDefaultMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="17" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1aff26015d6bb012461cd1e4729af79974" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>static</type>
        <definition>static Pathfinder.Util.ConvertAny.ConvertAny</definition>
        <argsstring>()</argsstring>
        <name>ConvertAny</name>
        <briefdescription>
<para>Initializes static members of the <ref refid="class_pathfinder_1_1_util_1_1_convert_any" kindref="compound">ConvertAny</ref> class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="26" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1a33f743d84cb7f9e4e61481824839f30c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>object</type>
        <definition>static object Pathfinder.Util.ConvertAny.ConvertByGeneric</definition>
        <argsstring>(object fromValue, Type toType)</argsstring>
        <name>ConvertByGeneric</name>
        <param>
          <type>object</type>
          <declname>fromValue</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>toType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="283" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="283" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1aaec613fb113f7c7e03aecd5e69635916" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ToType</type>
        <definition>static ToType Pathfinder.Util.ConvertAny.ConvertInternal&lt; ToType &gt;</definition>
        <argsstring>(object fromValue)</argsstring>
        <name>ConvertInternal&lt; ToType &gt;</name>
        <param>
          <type>object</type>
          <declname>fromValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="293" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="293" bodyend="329"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1a211417c0b2775788ddad44bf68b77340" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Pathfinder.Util.ConvertAny.CanConvert&lt; ToType &gt;</definition>
        <argsstring>(object value)</argsstring>
        <name>CanConvert&lt; ToType &gt;</name>
        <param>
          <type>object</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Determines whether this instance can convert the specified value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ToType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of to type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>From value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if this instance can convert the specified from value; otherwise, <computeroutput>false</computeroutput>.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="46" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="46" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1ac26e564a913833a7ae292cbd6f479ef5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Pathfinder.Util.ConvertAny.CanConvert</definition>
        <argsstring>(Type fromType, Type toType)</argsstring>
        <name>CanConvert</name>
        <param>
          <type>Type</type>
          <declname>fromType</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>toType</declname>
        </param>
        <briefdescription>
<para>Determines whether this instance can convert the specified <emphasis>fromType</emphasis>  to the <emphasis>toType</emphasis> . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromType</parametername>
</parameternamelist>
<parameterdescription>
<para>From type.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toType</parametername>
</parameternamelist>
<parameterdescription>
<para>To type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the conversion is valid; otherwise, <computeroutput>false</computeroutput>.</para></simplesect>
</para><para>This method checks 4 types of conversions:</para><para><orderedlist>
<listitem><para>If they are the same type, returns true.</para></listitem><listitem><para>If they are both IConvertible types, return true.</para></listitem><listitem><para>If the toType is part of the inheritance chain of fromType.</para></listitem><listitem><para>Direct casting, only returns true if both types have default constructors. </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="104" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="104" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1adb0ab183ab839169b79d86f823958153" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Pathfinder.Util.ConvertAny.TryConvert&lt; ToType &gt;</definition>
        <argsstring>(object value, out ToType toValue)</argsstring>
        <name>TryConvert&lt; ToType &gt;</name>
        <param>
          <type>object</type>
          <declname>value</declname>
        </param>
        <param>
          <type>out ToType</type>
          <declname>toValue</declname>
        </param>
        <briefdescription>
<para>Attempts to convert the value to the specified type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ToType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to convert to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to convert.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Converted value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if conversion succeeds, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
</para><para>If the conversion fails, the value of <emphasis>toValue</emphasis>  is the default of that particular type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="163" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="163" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1ae08647d4b45f5d659854672bcc39a39a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ToType</type>
        <definition>static ToType Pathfinder.Util.ConvertAny.Convert&lt; ToType &gt;</definition>
        <argsstring>(object fromValue)</argsstring>
        <name>Convert&lt; ToType &gt;</name>
        <param>
          <type>object</type>
          <declname>fromValue</declname>
        </param>
        <briefdescription>
<para>Converts the specified from value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ToType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to convert to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Converted value.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>InvalidCastException</parametername>
</parameternamelist>
<parameterdescription>
<para>Raised when the value cannot be converted to the specified type.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="200" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="200" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1a95398d21d016cc216d4e48e2e6df5f91" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>object</type>
        <definition>static object Pathfinder.Util.ConvertAny.ConvertByType</definition>
        <argsstring>(object fromValue, Type toType)</argsstring>
        <name>ConvertByType</name>
        <param>
          <type>object</type>
          <declname>fromValue</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>toType</declname>
        </param>
        <briefdescription>
<para>Converts value to the specified type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to convert.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to convert to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object that represents the converted type.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="221" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="221" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1a4cf9a5b4fdc50fa787fa5ecc3a039045" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>static T Pathfinder.Util.ConvertAny.Default&lt; T &gt;</definition>
        <argsstring>()</argsstring>
        <name>Default&lt; T &gt;</name>
        <briefdescription>
<para>Creates a default instance of <emphasis>T</emphasis>  </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to create a default instance of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default instance of <emphasis>T</emphasis> .</para></simplesect>
</para><para>For primitive types this will create a value of 0 with the specified type. For objects, if the object has a default constructor it will return a default instance of the type. If the object does not have a default constructor, it will return null. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="248" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="248" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_util_1_1_convert_any_1af88edc34911fdbe8a285bf7eb972c1a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>object</type>
        <definition>static object Pathfinder.Util.ConvertAny.DefaultByType</definition>
        <argsstring>(Type type)</argsstring>
        <name>DefaultByType</name>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a default instance of <emphasis>type</emphasis> . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Instance of the specified type.</para></simplesect>
</para><para>This method uses the generic Default method to create an instance of the type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Util/ConvertAny.cs" line="271" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="271" bodyend="276"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extended conversion utilities to convert any type to any other type provided the conversion is valid. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Pathfinder/Util/ConvertAny.cs" line="12" column="1" bodyfile="Pathfinder/Util/ConvertAny.cs" bodystart="11" bodyend="333"/>
    <listofallmembers>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1a767c2e6f9624485257d66bde114cc17d" prot="private" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>_genericConvertMethod</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1a2a5f1309b602aefd2c4918e41be4a3f2" prot="private" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>_genericDefaultMethod</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1ac26e564a913833a7ae292cbd6f479ef5" prot="public" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>CanConvert</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1a211417c0b2775788ddad44bf68b77340" prot="public" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>CanConvert&lt; ToType &gt;</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1ae08647d4b45f5d659854672bcc39a39a" prot="public" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>Convert&lt; ToType &gt;</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1aff26015d6bb012461cd1e4729af79974" prot="private" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>ConvertAny</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1a33f743d84cb7f9e4e61481824839f30c" prot="private" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>ConvertByGeneric</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1a95398d21d016cc216d4e48e2e6df5f91" prot="public" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>ConvertByType</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1aaec613fb113f7c7e03aecd5e69635916" prot="private" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>ConvertInternal&lt; ToType &gt;</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1a4cf9a5b4fdc50fa787fa5ecc3a039045" prot="public" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>Default&lt; T &gt;</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1af88edc34911fdbe8a285bf7eb972c1a8" prot="public" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>DefaultByType</name></member>
      <member refid="class_pathfinder_1_1_util_1_1_convert_any_1adb0ab183ab839169b79d86f823958153" prot="public" virt="non-virtual"><scope>Pathfinder::Util::ConvertAny</scope><name>TryConvert&lt; ToType &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
