<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_hacknet_1_1_game_screen" kind="class" language="C#" prot="public">
    <compoundname>Hacknet::GameScreen</compoundname>
    <derivedcompoundref refid="class_hacknet_1_1_o_s" prot="public" virt="non-virtual">Hacknet.OS</derivedcompoundref>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1a4f07a74db6ecd8a2efa28a6da68f25a0" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type>PlayerIndex</type>
        <definition>PlayerIndex Hacknet.GameScreen.ControllingPlayer</definition>
        <argsstring></argsstring>
        <name>ControllingPlayer</name>
        <briefdescription>
<para>Retrieves the screen&apos;s controlling player&apos;s index, or <computeroutput>null</computeroutput> if it does not exist </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="52" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1aca7edc9ca28bc556a858826e8e419387" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Hacknet.GameScreen.IsActive</definition>
        <argsstring></argsstring>
        <name>IsActive</name>
        <briefdescription>
<para>Retrieves <computeroutput>true</computeroutput> if the screen is active, <computeroutput>false</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="56" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1a721d705516f9d6c2d299c001ebbe7f74" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="yes">
        <type>bool</type>
        <definition>bool Hacknet.GameScreen.IsExiting</definition>
        <argsstring></argsstring>
        <name>IsExiting</name>
        <briefdescription>
<para>Retrieves <computeroutput>true</computeroutput> if the screen is exiting, <computeroutput>false</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="60" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1ab5de92a0ecf428ceaeb25533aec96582" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="yes">
        <type>bool</type>
        <definition>bool Hacknet.GameScreen.IsPopup</definition>
        <argsstring></argsstring>
        <name>IsPopup</name>
        <briefdescription>
<para>Retrieves <computeroutput>true</computeroutput> if the screen is a popup, <computeroutput>false</computeroutput> otherwise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="64" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1ace8b0c089864327931a470505fbf1078" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_hacknet_1_1_screen_manager" kindref="compound">ScreenManager</ref></type>
        <definition>ScreenManager Hacknet.GameScreen.ScreenManager</definition>
        <argsstring></argsstring>
        <name>ScreenManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="65" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1a42a1603fa85a3d7cf7a7f80cce21942b" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="yes">
        <type>ScreenState</type>
        <definition>ScreenState Hacknet.GameScreen.ScreenState</definition>
        <argsstring></argsstring>
        <name>ScreenState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="66" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1a2d328d61fff948922f81c755e09b887b" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>byte</type>
        <definition>byte Hacknet.GameScreen.TransitionAlpha</definition>
        <argsstring></argsstring>
        <name>TransitionAlpha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="67" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1af436a4316d9c74feb0d422bd1f5a93c7" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="yes">
        <type>TimeSpan</type>
        <definition>TimeSpan Hacknet.GameScreen.TransitionOffTime</definition>
        <argsstring></argsstring>
        <name>TransitionOffTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="68" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1a0f21938c0dec8a538837d51bf42860fb" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="yes">
        <type>TimeSpan</type>
        <definition>TimeSpan Hacknet.GameScreen.TransitionOnTime</definition>
        <argsstring></argsstring>
        <name>TransitionOnTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="69" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_hacknet_1_1_game_screen_1a1a1de66ff29e4729555d7c571e2dad99" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="yes">
        <type>float</type>
        <definition>float Hacknet.GameScreen.TransitionPosition</definition>
        <argsstring></argsstring>
        <name>TransitionPosition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="70" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hacknet_1_1_game_screen_1ad5981db7a8fbb6de68a5e4cb5b71f962" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Hacknet.GameScreen.Draw</definition>
        <argsstring>(GameTime gameTime)</argsstring>
        <name>Draw</name>
        <reimplementedby refid="class_hacknet_1_1_o_s_1a3a4ba6ccf8c54db47044ce80ceed97bf">Draw</reimplementedby>
        <param>
          <type>GameTime</type>
          <declname>gameTime</declname>
        </param>
        <briefdescription>
<para>Draws the screen given the delta of gameTime. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gameTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta of last draw</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_game_screen_1ade10ca23157ec2d18a04f79db2440b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hacknet.GameScreen.ExitScreen</definition>
        <argsstring>()</argsstring>
        <name>ExitScreen</name>
        <briefdescription>
<para>Exits the screen. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_game_screen_1adab8a6ff628a214a398645d5b7f16546" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Hacknet.GameScreen.HandleInput</definition>
        <argsstring>(InputState input)</argsstring>
        <name>HandleInput</name>
        <reimplementedby refid="class_hacknet_1_1_o_s_1a667b7b1a73e7731a555ce12119bc2b3d">HandleInput</reimplementedby>
        <param>
          <type>InputState</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Handles general input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_game_screen_1ab82d3fc47d1d46278e80f5b3cde2b01a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Hacknet.GameScreen.inputMethodChanged</definition>
        <argsstring>(bool usingGamePad)</argsstring>
        <name>inputMethodChanged</name>
        <reimplementedby refid="class_hacknet_1_1_o_s_1a2bc6c76283d6379c1770bd516f0026e2">inputMethodChanged</reimplementedby>
        <param>
          <type>bool</type>
          <declname>usingGamePad</declname>
        </param>
        <briefdescription>
<para>Marks input method to change. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usingGamePad</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput> then input changes to game pad.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_game_screen_1a257b0a6ad6d0beca8ba1b78963e1ca63" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Hacknet.GameScreen.UnloadContent</definition>
        <argsstring>()</argsstring>
        <name>UnloadContent</name>
        <reimplementedby refid="class_hacknet_1_1_o_s_1a346a19a1d7e73c386da9d216b15cb126">UnloadContent</reimplementedby>
        <briefdescription>
<para>Unloads content if need be. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_game_screen_1a2bfe8611a4bc6d6f432d81fdee06789c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Hacknet.GameScreen.LoadContent</definition>
        <argsstring>()</argsstring>
        <name>LoadContent</name>
        <reimplementedby refid="class_hacknet_1_1_o_s_1aba4b67632431d3ed55bb7443d92cb777">LoadContent</reimplementedby>
        <briefdescription>
<para>Loads content. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_game_screen_1a50e1a2d754930682e4fab53d113276c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Hacknet.GameScreen.Update</definition>
        <argsstring>(GameTime gameTime, bool otherScreenHasFocus, bool coveredByOtherScreen)</argsstring>
        <name>Update</name>
        <reimplementedby refid="class_hacknet_1_1_o_s_1a62efb343bf7cef0142dfaed524c1632c">Update</reimplementedby>
        <param>
          <type>GameTime</type>
          <declname>gameTime</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>otherScreenHasFocus</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>coveredByOtherScreen</declname>
        </param>
        <briefdescription>
<para>Updates the screen given the delta of gameTime gameTime. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gameTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta of last update.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>otherScreenHasFocus</parametername>
</parameternamelist>
<parameterdescription>
<para>If other screen has focus then is <computeroutput>true</computeroutput>, otherwise <computeroutput>false</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coveredByOtherScreen</parametername>
</parameternamelist>
<parameterdescription>
<para>If covered by another screen then is <computeroutput>true</computeroutput>, otherwise <computeroutput>false</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="104" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="386">
        <label>Hacknet.GameScreen</label>
        <link refid="class_hacknet_1_1_game_screen"/>
      </node>
      <node id="387">
        <label>Hacknet.OS</label>
        <link refid="class_hacknet_1_1_o_s"/>
        <childnode refid="386" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="Pathfinder/Docs/Hacknet.cs" line="48" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="47" bodyend="105"/>
    <listofallmembers>
      <member refid="class_hacknet_1_1_game_screen_1a4f07a74db6ecd8a2efa28a6da68f25a0" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>ControllingPlayer</name></member>
      <member refid="class_hacknet_1_1_game_screen_1ad5981db7a8fbb6de68a5e4cb5b71f962" prot="public" virt="virtual"><scope>Hacknet::GameScreen</scope><name>Draw</name></member>
      <member refid="class_hacknet_1_1_game_screen_1ade10ca23157ec2d18a04f79db2440b03" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>ExitScreen</name></member>
      <member refid="class_hacknet_1_1_game_screen_1adab8a6ff628a214a398645d5b7f16546" prot="public" virt="virtual"><scope>Hacknet::GameScreen</scope><name>HandleInput</name></member>
      <member refid="class_hacknet_1_1_game_screen_1ab82d3fc47d1d46278e80f5b3cde2b01a" prot="public" virt="virtual"><scope>Hacknet::GameScreen</scope><name>inputMethodChanged</name></member>
      <member refid="class_hacknet_1_1_game_screen_1aca7edc9ca28bc556a858826e8e419387" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>IsActive</name></member>
      <member refid="class_hacknet_1_1_game_screen_1a721d705516f9d6c2d299c001ebbe7f74" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>IsExiting</name></member>
      <member refid="class_hacknet_1_1_game_screen_1ab5de92a0ecf428ceaeb25533aec96582" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>IsPopup</name></member>
      <member refid="class_hacknet_1_1_game_screen_1a2bfe8611a4bc6d6f432d81fdee06789c" prot="public" virt="virtual"><scope>Hacknet::GameScreen</scope><name>LoadContent</name></member>
      <member refid="class_hacknet_1_1_game_screen_1ace8b0c089864327931a470505fbf1078" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>ScreenManager</name></member>
      <member refid="class_hacknet_1_1_game_screen_1a42a1603fa85a3d7cf7a7f80cce21942b" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>ScreenState</name></member>
      <member refid="class_hacknet_1_1_game_screen_1a2d328d61fff948922f81c755e09b887b" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>TransitionAlpha</name></member>
      <member refid="class_hacknet_1_1_game_screen_1af436a4316d9c74feb0d422bd1f5a93c7" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>TransitionOffTime</name></member>
      <member refid="class_hacknet_1_1_game_screen_1a0f21938c0dec8a538837d51bf42860fb" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>TransitionOnTime</name></member>
      <member refid="class_hacknet_1_1_game_screen_1a1a1de66ff29e4729555d7c571e2dad99" prot="public" virt="non-virtual"><scope>Hacknet::GameScreen</scope><name>TransitionPosition</name></member>
      <member refid="class_hacknet_1_1_game_screen_1a257b0a6ad6d0beca8ba1b78963e1ca63" prot="public" virt="virtual"><scope>Hacknet::GameScreen</scope><name>UnloadContent</name></member>
      <member refid="class_hacknet_1_1_game_screen_1a50e1a2d754930682e4fab53d113276c8" prot="public" virt="virtual"><scope>Hacknet::GameScreen</scope><name>Update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
