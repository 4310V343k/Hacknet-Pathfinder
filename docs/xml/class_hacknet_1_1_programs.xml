<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_hacknet_1_1_programs" kind="class" language="C#" prot="public">
    <compoundname>Hacknet::Programs</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a880d7fc7afd888b63839ccf6b366aa12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.addNote</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>addNote</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="878" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1aab7a2caae84ec5eb38c6ccdbe2d52b96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.analyze</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>analyze</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a8bc0fc4371ad5234734273da72e7eb15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.cat</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>cat</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="880" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a8f88abbccb7526934b7b722be67855db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.cd</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>cd</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a0fc19e65b4611dc3abf6b65302aaa5d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.cdDrive</definition>
        <argsstring>(bool open)</argsstring>
        <name>cdDrive</name>
        <param>
          <type>bool</type>
          <declname>open</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="882" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a736284eb7b02c67156042716ffc14847" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.clear</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>clear</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="883" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1ac7245019c6e884bb60618043934d2e64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Hacknet.Programs.computerExists</definition>
        <argsstring>(OS os, string ip)</argsstring>
        <name>computerExists</name>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type>string</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="884" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a2679e832adb599f3c2c1d653aa488fa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.connect</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>connect</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="885" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1ac06f15d1d4f72d613f4d7f779306e22a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.disconnect</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>disconnect</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="886" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1ab53a5de1c0df0db3989c6a65e712ad7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.doDots</definition>
        <argsstring>(int num, int msDelay, OS os)</argsstring>
        <name>doDots</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>msDelay</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="887" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a58525efd83a9683e632fa9ce683e7729" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.execute</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>execute</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="888" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1aee103337491498e0ff4995f93f1d3425" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.fastHack</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>fastHack</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a25d153e3e8de6aa792a388ecbd6876d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.firstTimeInit</definition>
        <argsstring>(string[] args, OS os, bool callWasRecursed=false)</argsstring>
        <name>firstTimeInit</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callWasRecursed</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="890" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a19cdadd5fa59c3a584af90062c91ceb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hacknet_1_1_computer" kindref="compound">Computer</ref></type>
        <definition>static Computer Hacknet.Programs.getComputer</definition>
        <argsstring>(OS os, string ip_Or_ID_or_Name)</argsstring>
        <name>getComputer</name>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type>string</type>
          <declname>ip_Or_ID_or_Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="891" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1ac9225c4700b3b8481b9b54f216e6e152" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
        <definition>static Folder Hacknet.Programs.getCurrentFolder</definition>
        <argsstring>(OS os)</argsstring>
        <name>getCurrentFolder</name>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="892" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a16b0abd2cc8a142e54972c0a6967d77f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
        <definition>static Folder Hacknet.Programs.getFolderAtDepth</definition>
        <argsstring>(OS os, int depth)</argsstring>
        <name>getFolderAtDepth</name>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a5f52013f36d796efb11cc5a4bad2a98f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
        <definition>static Folder Hacknet.Programs.getFolderAtPath</definition>
        <argsstring>(string path, OS os, Folder rootFolder=null, bool returnsNullOnNoFind=false)</argsstring>
        <name>getFolderAtPath</name>
        <param>
          <type>string</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
          <declname>rootFolder</declname>
          <defval>null</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>returnsNullOnNoFind</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="894" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1ae81e684cc2aa2e600c139568c13dab04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
        <definition>static Folder Hacknet.Programs.getFolderAtPathAsFarAsPossible</definition>
        <argsstring>(string path, OS os, Folder rootFolder, out string likelyFilename)</argsstring>
        <name>getFolderAtPathAsFarAsPossible</name>
        <param>
          <type>string</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
          <declname>rootFolder</declname>
        </param>
        <param>
          <type>out string</type>
          <declname>likelyFilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="895" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a98c2aba7d0ff4548d2810a78c4456a56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
        <definition>static Folder Hacknet.Programs.getFolderAtPathAsFarAsPossible</definition>
        <argsstring>(string path, OS os, Folder rootFolder)</argsstring>
        <name>getFolderAtPathAsFarAsPossible</name>
        <param>
          <type>string</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
          <declname>rootFolder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="896" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a57cfc2f7b80b068a20da6de996333175" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
        <definition>static Folder Hacknet.Programs.getFolderFromNavigationPath</definition>
        <argsstring>(List&lt; int &gt; path, Folder startFolder, OS os)</argsstring>
        <name>getFolderFromNavigationPath</name>
        <param>
          <type>List&lt; int &gt;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
          <declname>startFolder</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="897" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1abed30bc9fa88d2bfff3f6a5a8ec90220" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>List&lt; int &gt;</type>
        <definition>static List&lt;int&gt; Hacknet.Programs.getNavigationPathAtPath</definition>
        <argsstring>(string path, OS os, Folder currentFolder=null)</argsstring>
        <name>getNavigationPathAtPath</name>
        <param>
          <type>string</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_folder" kindref="compound">Folder</ref></type>
          <declname>currentFolder</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="898" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1acdad7b34dd4e6cd7ec3d1bf93ecca59e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.getString</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>getString</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="899" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a2559a1d48f61f800372ab9c381ba6b4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.kill</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>kill</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="900" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a8580e7c224f93f6bbe609e96854755d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.login</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>login</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="901" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a15c7c8a0eb96441a8981d25a73d13d06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.ls</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>ls</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="902" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a470f6530f191d4275f8d28bb616fbd1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.mv</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>mv</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1af6d3710149ab2cec0e2b1041ecbe5123" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.opCDTray</definition>
        <argsstring>(string[] args, OS os, bool isOpen)</argsstring>
        <name>opCDTray</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isOpen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1ae64a794495dc13f03b4e60eee6cfc656" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Hacknet.Programs.parseStringFromGetStringCommand</definition>
        <argsstring>(OS os, out string data)</argsstring>
        <name>parseStringFromGetStringCommand</name>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type>out string</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="905" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a465f96a064a4ed024a6fb497fcca6f93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.probe</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>probe</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="906" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1af2732e02e6edbf671b05d069567e984f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.ps</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>ps</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="907" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1af67932875d6b2c70bd7977df3843979b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.reboot</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>reboot</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="908" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a1460a805c1cb5a59dce47de892956cc0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.replace</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>replace</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="909" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a5d25c4df6f1c1c903fe260d55dd46afb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.replace2</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>replace2</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="910" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1ae53ada59c5c6c224554e76d59e17ce3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.revealAll</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>revealAll</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="911" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a36a6bcb0b98409c2df78f66adbd15afc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.rm</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>rm</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="912" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a30c7245c6282b53b3f619ace55ae6443" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.rm2</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>rm2</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="913" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1aff384573628cf6bba86e9d48d4c313ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.scan</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>scan</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1af62851b0818ab5e561aed16f1039ea13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.scp</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>scp</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a7f7bdaefc55da72b71e23a8c3ea030f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.solve</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>solve</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="916" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1a265bfaa3ca928b5991a789c60f307eb2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.sudo</definition>
        <argsstring>(OS os, Action action)</argsstring>
        <name>sudo</name>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type>Action</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="917" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1ac117aa001daf588bc21dc6f913441c40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.typeOut</definition>
        <argsstring>(string s, OS os, int delay=50)</argsstring>
        <name>typeOut</name>
        <param>
          <type>string</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="918" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hacknet_1_1_programs_1aa44aaa99c2707624176b00f143dd5932" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Hacknet.Programs.upload</definition>
        <argsstring>(string[] args, OS os)</argsstring>
        <name>upload</name>
        <param>
          <type>string []</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_hacknet_1_1_o_s" kindref="compound">OS</ref></type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/Docs/Hacknet.cs" line="919" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Pathfinder/Docs/Hacknet.cs" line="877" column="1" bodyfile="Pathfinder/Docs/Hacknet.cs" bodystart="876" bodyend="920"/>
    <listofallmembers>
      <member refid="class_hacknet_1_1_programs_1a880d7fc7afd888b63839ccf6b366aa12" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>addNote</name></member>
      <member refid="class_hacknet_1_1_programs_1aab7a2caae84ec5eb38c6ccdbe2d52b96" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>analyze</name></member>
      <member refid="class_hacknet_1_1_programs_1a8bc0fc4371ad5234734273da72e7eb15" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>cat</name></member>
      <member refid="class_hacknet_1_1_programs_1a8f88abbccb7526934b7b722be67855db" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>cd</name></member>
      <member refid="class_hacknet_1_1_programs_1a0fc19e65b4611dc3abf6b65302aaa5d5" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>cdDrive</name></member>
      <member refid="class_hacknet_1_1_programs_1a736284eb7b02c67156042716ffc14847" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>clear</name></member>
      <member refid="class_hacknet_1_1_programs_1ac7245019c6e884bb60618043934d2e64" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>computerExists</name></member>
      <member refid="class_hacknet_1_1_programs_1a2679e832adb599f3c2c1d653aa488fa7" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>connect</name></member>
      <member refid="class_hacknet_1_1_programs_1ac06f15d1d4f72d613f4d7f779306e22a" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>disconnect</name></member>
      <member refid="class_hacknet_1_1_programs_1ab53a5de1c0df0db3989c6a65e712ad7b" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>doDots</name></member>
      <member refid="class_hacknet_1_1_programs_1a58525efd83a9683e632fa9ce683e7729" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>execute</name></member>
      <member refid="class_hacknet_1_1_programs_1aee103337491498e0ff4995f93f1d3425" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>fastHack</name></member>
      <member refid="class_hacknet_1_1_programs_1a25d153e3e8de6aa792a388ecbd6876d5" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>firstTimeInit</name></member>
      <member refid="class_hacknet_1_1_programs_1a19cdadd5fa59c3a584af90062c91ceb8" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getComputer</name></member>
      <member refid="class_hacknet_1_1_programs_1ac9225c4700b3b8481b9b54f216e6e152" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getCurrentFolder</name></member>
      <member refid="class_hacknet_1_1_programs_1a16b0abd2cc8a142e54972c0a6967d77f" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getFolderAtDepth</name></member>
      <member refid="class_hacknet_1_1_programs_1a5f52013f36d796efb11cc5a4bad2a98f" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getFolderAtPath</name></member>
      <member refid="class_hacknet_1_1_programs_1ae81e684cc2aa2e600c139568c13dab04" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getFolderAtPathAsFarAsPossible</name></member>
      <member refid="class_hacknet_1_1_programs_1a98c2aba7d0ff4548d2810a78c4456a56" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getFolderAtPathAsFarAsPossible</name></member>
      <member refid="class_hacknet_1_1_programs_1a57cfc2f7b80b068a20da6de996333175" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getFolderFromNavigationPath</name></member>
      <member refid="class_hacknet_1_1_programs_1abed30bc9fa88d2bfff3f6a5a8ec90220" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getNavigationPathAtPath</name></member>
      <member refid="class_hacknet_1_1_programs_1acdad7b34dd4e6cd7ec3d1bf93ecca59e" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>getString</name></member>
      <member refid="class_hacknet_1_1_programs_1a2559a1d48f61f800372ab9c381ba6b4d" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>kill</name></member>
      <member refid="class_hacknet_1_1_programs_1a8580e7c224f93f6bbe609e96854755d4" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>login</name></member>
      <member refid="class_hacknet_1_1_programs_1a15c7c8a0eb96441a8981d25a73d13d06" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>ls</name></member>
      <member refid="class_hacknet_1_1_programs_1a470f6530f191d4275f8d28bb616fbd1a" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>mv</name></member>
      <member refid="class_hacknet_1_1_programs_1af6d3710149ab2cec0e2b1041ecbe5123" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>opCDTray</name></member>
      <member refid="class_hacknet_1_1_programs_1ae64a794495dc13f03b4e60eee6cfc656" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>parseStringFromGetStringCommand</name></member>
      <member refid="class_hacknet_1_1_programs_1a465f96a064a4ed024a6fb497fcca6f93" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>probe</name></member>
      <member refid="class_hacknet_1_1_programs_1af2732e02e6edbf671b05d069567e984f" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>ps</name></member>
      <member refid="class_hacknet_1_1_programs_1af67932875d6b2c70bd7977df3843979b" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>reboot</name></member>
      <member refid="class_hacknet_1_1_programs_1a1460a805c1cb5a59dce47de892956cc0" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>replace</name></member>
      <member refid="class_hacknet_1_1_programs_1a5d25c4df6f1c1c903fe260d55dd46afb" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>replace2</name></member>
      <member refid="class_hacknet_1_1_programs_1ae53ada59c5c6c224554e76d59e17ce3d" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>revealAll</name></member>
      <member refid="class_hacknet_1_1_programs_1a36a6bcb0b98409c2df78f66adbd15afc" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>rm</name></member>
      <member refid="class_hacknet_1_1_programs_1a30c7245c6282b53b3f619ace55ae6443" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>rm2</name></member>
      <member refid="class_hacknet_1_1_programs_1aff384573628cf6bba86e9d48d4c313ed" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>scan</name></member>
      <member refid="class_hacknet_1_1_programs_1af62851b0818ab5e561aed16f1039ea13" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>scp</name></member>
      <member refid="class_hacknet_1_1_programs_1a7f7bdaefc55da72b71e23a8c3ea030f3" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>solve</name></member>
      <member refid="class_hacknet_1_1_programs_1a265bfaa3ca928b5991a789c60f307eb2" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>sudo</name></member>
      <member refid="class_hacknet_1_1_programs_1ac117aa001daf588bc21dc6f913441c40" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>typeOut</name></member>
      <member refid="class_hacknet_1_1_programs_1aa44aaa99c2707624176b00f143dd5932" prot="public" virt="non-virtual"><scope>Hacknet::Programs</scope><name>upload</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
