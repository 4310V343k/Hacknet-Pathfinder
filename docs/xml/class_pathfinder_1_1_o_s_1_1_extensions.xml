<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_pathfinder_1_1_o_s_1_1_extensions" kind="class" language="C#" prot="public">
    <compoundname>Pathfinder::OS::Extensions</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1a4950c4d2a55107114b2dd8dc6880bb6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>List&lt; ExeModule &gt;</type>
        <definition>static List&lt;ExeModule&gt; Pathfinder.OS.Extensions.GetExesFor</definition>
        <argsstring>(this Hacknet.OS os, Type instanceType)</argsstring>
        <name>GetExesFor</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>instanceType</declname>
        </param>
        <briefdescription>
<para>Only retrieves the <ref refid="namespace_pathfinder_1_1_o_s" kindref="compound">OS</ref>&apos;s exes of the specifed type. Use Extensions.GetExesFor(Hacknet.OS) to get inherited types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="14" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="14" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1a16b906e987fed24868b83f396b7c3981" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>List&lt; T &gt;</type>
        <definition>static List&lt;T&gt; Pathfinder.OS.Extensions.GetExesFor&lt; T &gt;</definition>
        <argsstring>(this Hacknet.OS os)</argsstring>
        <name>GetExesFor&lt; T &gt;</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Retrieves all exes derived from T on the <ref refid="namespace_pathfinder_1_1_o_s" kindref="compound">OS</ref>, Use Extensions.GetExesFor(Hacknet.OS, Type) to get only singular types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="26" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1a8c1146c3e85cf109a3a22a91ffca1309" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>List&lt; Executable.Instance &gt;</type>
        <definition>static List&lt;Executable.Instance&gt; Pathfinder.OS.Extensions.GetModExeInterfaceFor</definition>
        <argsstring>(this Hacknet.OS os, Type interfaceType)</argsstring>
        <name>GetModExeInterfaceFor</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>interfaceType</declname>
        </param>
        <briefdescription>
<para>Only retrieves the <ref refid="namespace_pathfinder_1_1_o_s" kindref="compound">OS</ref>&apos;s modded exes of the specifed interface. Use Extensions.GetModExeInterfaceFor(Hacknet.OS) to get inherited types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="38" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="38" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1abab4d3e2ab3b3162b5444bfa68ad7deb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>List&lt; Executable.Instance &gt;</type>
        <definition>static List&lt;Executable.Instance&gt; Pathfinder.OS.Extensions.GetModExeInterfaceFor&lt; T &gt;</definition>
        <argsstring>(this Hacknet.OS os)</argsstring>
        <name>GetModExeInterfaceFor&lt; T &gt;</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Retrieves all modded exe interfaces derived from T on the <ref refid="namespace_pathfinder_1_1_o_s" kindref="compound">OS</ref>, Use Extensions.GetModExeInterfaceFor(Hacknet.OS, Type) to get only singular types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="50" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1a451464eaee9d6ba599c954b983f948ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Hacknet.Computer</type>
        <definition>static Hacknet.Computer Pathfinder.OS.Extensions.GetCurrentComputer</definition>
        <argsstring>(this Hacknet.OS os)</argsstring>
        <name>GetCurrentComputer</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Retrieves the currently active <ref refid="namespace_pathfinder_1_1_computer" kindref="compound">Computer</ref> according to the <ref refid="namespace_pathfinder_1_1_o_s" kindref="compound">OS</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="62" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1a557100b7b1f03ce98e5fd85757060db7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Hacknet.OS</type>
        <definition>static Hacknet.OS Pathfinder.OS.Extensions.Write</definition>
        <argsstring>(this Hacknet.OS os, string write)</argsstring>
        <name>Write</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <param>
          <type>string</type>
          <declname>write</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="67" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1a7daecfea5dc7b8dd5a5ad1a04dd0d90f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Hacknet.OS</type>
        <definition>static Hacknet.OS Pathfinder.OS.Extensions.WriteSingle</definition>
        <argsstring>(this Hacknet.OS os, string write)</argsstring>
        <name>WriteSingle</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <param>
          <type>string</type>
          <declname>write</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="73" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1ac8def64f44609db44b0942509d4cff6b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Hacknet.OS</type>
        <definition>static Hacknet.OS Pathfinder.OS.Extensions.WriteF</definition>
        <argsstring>(this Hacknet.OS os, params object[] input)</argsstring>
        <name>WriteF</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <param>
          <type>params object []</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Writes to the terminal using standard C# formatting. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="namespace_pathfinder_1_1_o_s" kindref="compound">OS</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input to format, zero index must be a formatable string.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="84" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_pathfinder_1_1_o_s_1_1_extensions_1a49fc34b5d9e4cf399f742dbf47a99ae9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Hacknet.OS</type>
        <definition>static Hacknet.OS Pathfinder.OS.Extensions.WriteSingleF</definition>
        <argsstring>(this Hacknet.OS os, params object[] input)</argsstring>
        <name>WriteSingleF</name>
        <param>
          <type>this Hacknet.OS</type>
          <declname>os</declname>
        </param>
        <param>
          <type>params object []</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Writes single to the terminal using standard C# formatting. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="namespace_pathfinder_1_1_o_s" kindref="compound">OS</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input to format, zero index must be a formatable string.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Pathfinder/OS/Extensions.cs" line="96" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="96" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Pathfinder/OS/Extensions.cs" line="10" column="1" bodyfile="Pathfinder/OS/Extensions.cs" bodystart="9" bodyend="102"/>
    <listofallmembers>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1a451464eaee9d6ba599c954b983f948ee" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>GetCurrentComputer</name></member>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1a4950c4d2a55107114b2dd8dc6880bb6d" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>GetExesFor</name></member>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1a16b906e987fed24868b83f396b7c3981" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>GetExesFor&lt; T &gt;</name></member>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1a8c1146c3e85cf109a3a22a91ffca1309" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>GetModExeInterfaceFor</name></member>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1abab4d3e2ab3b3162b5444bfa68ad7deb" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>GetModExeInterfaceFor&lt; T &gt;</name></member>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1a557100b7b1f03ce98e5fd85757060db7" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>Write</name></member>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1ac8def64f44609db44b0942509d4cff6b" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>WriteF</name></member>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1a7daecfea5dc7b8dd5a5ad1a04dd0d90f" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>WriteSingle</name></member>
      <member refid="class_pathfinder_1_1_o_s_1_1_extensions_1a49fc34b5d9e4cf399f742dbf47a99ae9" prot="public" virt="non-virtual"><scope>Pathfinder::OS::Extensions</scope><name>WriteSingleF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
